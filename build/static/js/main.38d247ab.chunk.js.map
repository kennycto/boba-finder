{"version":3,"sources":["store/actions/auth.js","store/actions/actionTypes.js","pages/AuthPage.js","pages/LogoutPage.js","components/MapMarker.js","components/MapAutoComplete.js","components/PlaceCard.js","pages/MapPage.js","utils.js","pages/TestPage.js","App.js","serviceWorker.js","store/reducers/auth.js","index.js"],"names":["authSuccess","token","userId","email","type","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","setAuthRedirectPath","path","AuthPage","handleSubmit","values","props","auth","password","state","isSignup","switchAuthModeHandler","setState","prevState","this","authRedirectPath","isAuthenticated","tailLayout","wrapperCol","span","errorMessage","error","className","message","loginForm","spinning","loading","labelCol","name","onFinish","Item","label","rules","required","min","hasFeedback","htmlType","onClick","loggedIn","to","Component","authStart","k","BASE_API_URL","SIGNUP_API_URL","SIGNIN_API_URL","url","payload","returnSecureToken","axios","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","console","log","actions","connect","Logout","React","PureComponent","authActions","MapMarker","key","EnvironmentTwoTone","twoToneColor","MapAutoComplete","handleSearch","value","autocompleteService","currentUserLatLng","length","searchQuery","input","location","radius","getQueryPredictions","options","map","resp","description","suggestion","onSelect","geoCoderService","geocode","address","geometry","lat","lng","pos","addSingleMarker","place_id","panTo","updateCurrentUserLatLng","mapsApi","suggestions","mapsLoaded","onSearch","style","width","placeholder","disabled","PlaceCard","place","formatted_address","price_level","imageUrl","photos","getUrl","open","opening_hours","isOpen","rating","user_ratings_total","distance","duration","navigate","separator","src","alt","Array","fill","join","SmileTwoTone","MehTwoTone","CarTwoTone","green","orange","red","MapPage","id","markers","Map","set","addMarker","newMap","forEach","cloneMap","has","get","searchResults","directionService","placesService","placesRequest","query","rankBy","places","RankBy","DISTANCE","textSearch","responseLength","i","directionRequest","origin","destination","travelMode","route","result","status","travelingRoute","routes","legs","addSearchResult","text","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","LatLng","toString","URL","searchParams","window","icon","AimOutlined","SearchOutlined","bootstrapURLKeys","libraries","defaultZoom","defaultCenter","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","apiHasLoaded","from","marker","LoadingOutlined","AutocompleteService","PlacesService","DirectionsService","Geocoder","setCenter","results","sort","a","b","TestPage","handleLoginButtonClicked","e","history","push","withRouter","App","authCheckState","exact","LogoutPage","getItem","Boolean","hostname","match","initialState","action","authFail","authLogout","reducer","rootReducer","combineReducers","authReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"+SAYaA,EAAc,SAACC,EAAOC,EAAQC,GACvC,MAAO,CACHC,KCboB,eDcpBC,QAASJ,EACTC,OAAQA,EACRC,MAAOA,IAWFG,EAAS,WAKlB,OAJAC,aAAaC,WAAW,SACxBD,aAAaC,WAAW,kBACxBD,aAAaC,WAAW,UACxBD,aAAaC,WAAW,SACjB,CACHJ,KC/BmB,gBDmCdK,EAAmB,SAACC,GAC7B,OAAO,SAACC,GACJC,YAAW,WACPD,EAASL,OACO,IAAjBI,KAoEEG,EAAsB,SAACC,GAChC,MAAO,CACHV,KC5G8B,yBD6G9BU,S,iCE1GFC,E,kDACF,aAAe,IAAD,8BACV,gBAUJC,aAAe,SAACC,GACZ,EAAKC,MAAMC,KAAKF,EAAOd,MAAOc,EAAOG,SAAU,EAAKC,MAAMC,WAZhD,EA6GdC,sBAAwB,WACpB,EAAKC,UAAS,SAACC,GACX,MAAO,CACHH,UAAWG,EAAUH,cA9G7B,EAAKD,MAAQ,CAAEC,UAAU,GAFf,E,mEAM0B,MAAhCI,KAAKR,MAAMS,kBACXD,KAAKR,MAAML,oBAAoB,O,+BAQ7B,IACES,EAAaI,KAAKL,MAAlBC,SADH,EAE8BI,KAAKR,MAAhCU,EAFH,EAEGA,gBAAiBzB,EAFpB,EAEoBA,MAWnB0B,EAAa,CACfC,WAAY,CACRC,KAAM,KAIVC,EAAe,KAEfN,KAAKR,MAAMe,QACXD,EAAe,uBAAGE,UAAU,SAASR,KAAKR,MAAMe,MAAME,UAG1D,IAAMC,EACF,6BACI,4BAAKd,EAAW,UAAY,WAE5B,kBAAC,IAAD,CAAMe,SAAUX,KAAKR,MAAMoB,SACvB,kBAAC,IAAD,iBA3BG,CACXC,SAAU,CACNR,KAAM,GAGVD,WAAY,CACRC,KAAM,KAqBF,CAAkBS,KAAK,QAAQC,SAAUf,KAAKV,eAC1C,kBAAC,IAAK0B,KAAN,CACIC,MAAM,QACNH,KAAK,QACLI,MAAO,CACH,CACIxC,KAAM,QACN+B,QAAS,8BAEb,CACIU,UAAU,EACVV,QAAS,8BAIjB,kBAAC,IAAD,OAEJ,kBAAC,IAAKO,KAAN,CACIC,MAAM,WACNH,KAAK,WACLI,MAAO,CACH,CACIC,UAAU,EACVC,IAAK,EACLX,QAAS,gCAGjBY,aAAW,GAEX,kBAAC,IAAD,OAEJ,kBAAC,IAAKL,KAASb,EACX,kBAAC,IAAD,CAAQzB,KAAK,UAAU4C,SAAS,UAAhC,aAMXhB,EACD,kBAAC,IAAD,CAAQ5B,KAAK,OAAO6C,QAASvB,KAAKH,uBAC7BD,EAAW,UAAY,YAK9B4B,EACF,oCACI,yCAAW/C,EAAX,wBACA,kBAAC,IAAD,CAAMgD,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAIR,OAAIzB,KAAKR,MAAMU,gBACJ,kBAAC,IAAD,CAAUuB,GAAIzB,KAAKR,MAAMS,mBAIhC,yBAAKO,UAAU,YACVN,EAAkBsB,EAAWd,O,GAzGvBgB,aAiIfjC,EFzFY,SAAChB,EAAOiB,EAAUE,GAClC,OAAO,SAACX,GACJA,EA7CiB,SAACR,EAAOiB,GAC7B,MAAO,CACHhB,KCNkB,aDOlBD,QACAiB,YAyCSiC,CAAUlD,EAAOiB,IAC1B,IAAMkC,EAAC,0CACDC,EAAY,sDACZC,EAAc,UAAMD,EAAN,sBAAgCD,GAC9CG,EAAc,UAAMF,EAAN,kCAA4CD,GAC1DI,EAAMpC,EAAWkC,EAAiBC,EAClCE,EAAU,CACZxD,QACAiB,WACAwC,mBAAmB,GAEvBC,IACKC,KAAKJ,EAAKC,GACVI,MAAK,SAACC,GACH,IAAMC,EAAiB,IAAIC,MACvB,IAAIA,MAAOC,UAAsC,IAA1BH,EAASI,KAAKC,WAEzC9D,aAAa+D,QAAQ,QAASN,EAASI,KAAK/D,SAC5CE,aAAa+D,QAAQ,iBAAkBL,GACvC1D,aAAa+D,QAAQ,SAAUN,EAASI,KAAKG,SAC7ChE,aAAa+D,QAAQ,QAASN,EAASI,KAAKjE,OAC5CQ,EACIX,EACIgE,EAASI,KAAK/D,QACd2D,EAASI,KAAKG,QACdP,EAASI,KAAKjE,QAGtBQ,EAASF,EAAiBuD,EAASI,KAAKC,eAE3CG,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZ9D,EA3DL,CACHP,KCrBiB,YDsBjB6B,MAyD0BwC,EAAIT,SAASI,KAAKnC,aEuDtCpB,EAAwB+D,EAEvBC,eAZS,SAACxD,GACrB,MAAO,CACHiB,QAASjB,EAAMF,KAAKmB,QACpBL,MAAOZ,EAAMF,KAAKc,MAClBL,kBAAmBP,EAAMF,KAAKlB,MAC9BE,MAAOkB,EAAMF,KAAKhB,MAClBwB,iBAAkBN,EAAMF,KAAKQ,oBAMG,CAAER,OAAMN,uBAAjCgE,CACX9D,GCtIE+D,E,kLAEEpD,KAAKR,MAAMZ,W,+BAIX,OAAO,kBAAC,IAAD,CAAU6C,GAAG,c,GANP4B,IAAMC,eAUnB1E,EAAW2E,EAEJJ,cAAQ,KAAM,CAAEvE,UAAhBuE,CAA0BC,G,4CCJ1BI,E,uKARb,OACC,yBAAKhD,UAAU,YAAYiD,IAAKzD,KAAKR,MAAMiE,KAC1C,kBAACC,EAAA,EAAD,CAAoBlD,UAAU,OAAOmD,aAAa,iB,GAJ9BjC,a,SC8ETkC,E,kDA7Ed,WAAYpE,GAAQ,IAAD,8BAClB,cAAMA,IA0BPqE,aAAe,SAAAC,GAAU,IAAD,EAC4B,EAAKnE,MAAhDoE,EADe,EACfA,oBAAqBC,EADN,EACMA,kBAE7B,GAAIF,EAAMG,OAAS,EAAG,CACrB,IAAMC,EAAc,CACnBC,MAAOL,EACPM,SAAUJ,EACVK,OAAQ,KAETN,EAAoBO,oBAAoBJ,GAAa,SAAA5B,GACpD,GAAIA,EAAU,CACb,IAAMiC,EAAUjC,EAASkC,KAAI,SAAAC,GAC5B,OAAO,2BAAKA,GAAZ,IAAkBX,MAAOW,EAAKC,iBAE/B,EAAK5E,SAAS,CAAEyE,UAASI,WAAYrC,UAzCtB,EA+CnBsC,SAAW,SAAAd,GAAU,IACZU,EAAQ,EAAK7E,MAAb6E,IACR,EAAK7E,MAAMkF,gBAAgBC,QAAQ,CAAEC,QAASjB,IAAS,SAAAxB,GAAa,IAC3D8B,EAAa9B,EAAS,GAAG0C,SAAzBZ,SACJa,EAAMb,EAASa,MACfC,EAAMd,EAASc,MACbC,EAAM,CAAEF,MAAKC,OACnB,EAAK1F,MAAM4F,gBAAgBH,EAAKC,EAAKpB,EAAOxB,EAAS,GAAG+C,UACxDb,EAAIc,MAAMH,GACV,EAAK3F,MAAM+F,wBAAwBJ,OAtDpC,EAAKxF,MAAQ,CACZ6E,IAAK,EAAKhF,MAAMgF,IAChBgB,QAAS,EAAKhG,MAAMgG,QACpBJ,gBAAiB,EAAK5F,MAAM4F,gBAC5BG,wBAAyB,EAAK/F,MAAM+F,wBACpCE,YAAa,GACblB,QAAS,GACTP,kBAAmB,EAAKxE,MAAMwE,kBAC9BD,oBAAqB,EAAKvE,MAAMuE,oBAChCc,gBAAiB,EAAKrF,MAAMqF,gBAC5Ba,WAAY,EAAKlG,MAAMkG,YAZN,E,iEAiBlB1F,KAAKF,SAAS,CACb0E,IAAKxE,KAAKR,MAAMgF,IAChBgB,QAASxF,KAAKR,MAAMgG,QACpBxB,kBAAmBhE,KAAKR,MAAMwE,kBAC9BD,oBAAqB/D,KAAKR,MAAMuE,oBAChCc,gBAAiB7E,KAAKR,MAAMqF,gBAC5Ba,WAAY1F,KAAKR,MAAMkG,e,+BAqCf,IACDnB,EAAYvE,KAAKL,MAAjB4E,QACR,OACC,yBAAK/D,UAAU,mBACd,kBAAC,IAAD,CACC+D,QAASA,EACToB,SAAU3F,KAAK6D,aACfe,SAAU5E,KAAK4E,SACfgB,MAAO,CAAEC,MAAO,KAChBC,YAAY,qBACZC,UAAW/F,KAAKR,MAAMkG,kB,GAvEGpC,iB,mCC2Ef0C,E,kDAzEd,WAAYxG,GAAQ,IAAD,sBAClB,cAAMA,GACN,IAAMyG,EAAQzG,EAAMyG,MAFF,OAGlB,EAAKA,MAAQA,EACb,EAAKnF,KAAOmF,EAAMnF,KAClB,EAAKoF,kBAAoBD,EAAMC,kBAC/B,EAAKC,YAAcF,EAAME,YACzB,EAAKC,SAAWH,EAAMI,OAAO,GAAGC,SAChC,EAAKC,KAAON,EAAMO,cAAcC,SAChC,EAAKC,OAAST,EAAMS,OACpB,EAAKC,mBAAqBV,EAAMU,mBAChC,EAAKC,SAAWX,EAAMW,SACtB,EAAKC,SAAWZ,EAAMY,SACtB,EAAKC,SAAWtH,EAAMsH,SAbJ,E,qDAgBT,IAAD,OACFC,EAAY,8CAClB,OACC,yBACCvG,UAAU,YACVe,QAAS,kBAAM,EAAK/B,MAAMsH,SAAS,EAAKb,SAExC,yBAAKzF,UAAU,UAAUR,KAAKc,MAC9B,yBAAKkG,IAAKhH,KAAKoG,SAAUa,IAAKjH,KAAKc,OACnC,yBAAKN,UAAU,WACd,yBAAKA,UAAU,cACd,8BAAOR,KAAK0G,OAAZ,WACCK,EACD,8BAAO/G,KAAK2G,mBAAZ,aAGD,0BAAMnG,UAAU,UAAUR,KAAKkG,mBAC/B,yBAAK1F,UAAU,gBACd,8BACE,IAAI0G,MAAMlH,KAAKmG,aAAagB,KAAK,KAAKC,KAAK,KAE5CL,EACA/G,KAAKuG,KACL,6BACC,uCACA,kBAACc,EAAA,EAAD,OAGD,6BACC,yCACA,kBAACC,EAAA,EAAD,QAIH,yBAAK9G,UAAU,uBACd,kBAAC+G,EAAA,EAAD,CAAY/G,UAAU,SAEtB,8BAAOR,KAAK4G,UACXG,EACD,8BAAO/G,KAAK6G,e,2CAOIH,GACpB,OAAIA,GAAU,EACNc,QAAM,GACHd,GAAU,EACbe,SAAO,GAEPC,MAAI,O,GArEUpE,iB,2BCSxB,IAsQeqE,E,kDAlQX,WAAYnI,GAAQ,IAAD,8BACf,cAAMA,IA8HV4F,gBAAkB,SAACH,EAAKC,EAAKpE,EAAM8G,GAC/B,IAAMC,EAAU,IAAIC,IACpBD,EAAQE,IAAIH,EAAI,CAAE3C,MAAKC,MAAKpE,OAAM8G,OAClC5E,QAAQC,IAAR,qBAA0BnC,EAA1B,aACA,EAAKhB,SAAS,CAAE+H,aAnID,EAsInBG,UAAY,SAAC/C,EAAKC,EAAKpE,EAAM8G,GACzB,IACMC,ECzJP,SAAkBrD,GACxB,IAAMyD,EAAS,IAAIH,IAInB,OAHAtD,EAAI0D,SAAQ,SAACpE,EAAOL,GACnBwE,EAAOF,IAAItE,EAAX,eAAqBK,OAEfmE,EDoJgBE,CADI,EAAKxI,MAAMkI,SAG3BA,EAAQO,IAAIR,IACZC,EAAQQ,IAAIT,GAAI3C,IAAMA,EACtB4C,EAAQQ,IAAIT,GAAI1C,IAAMA,EACtBlC,QAAQC,IAAR,mBAAwBnC,EAAxB,eAEA+G,EAAQE,IAAIH,EAAI,CAAE3C,MAAKC,MAAKpE,OAAM8G,OAClC5E,QAAQC,IAAR,qBAA0BnC,EAA1B,cAGJ,EAAKhB,SAAS,CAAE+H,aAnJD,EAsJnBhE,aAAe,WACX,EAAK/D,SAAS,CAAEwI,cAAe,GAAIT,QAAS,IAAIC,MAD/B,MAOb,EAAKnI,MAJL6F,EAHa,EAGbA,QACA+C,EAJa,EAIbA,iBACAC,EALa,EAKbA,cACAxE,EANa,EAMbA,kBAGEyE,EAAgB,CAClBrE,SAAUJ,EACVtF,KAAM,CACF,aACA,OACA,OACA,qBACA,iBAEJgK,MAAO,sDACPC,OAAQnD,EAAQoD,OAAOC,OAAOC,UAGlCN,EAAcO,WAAWN,GAAe,SAACnG,GAErC,IADA,IAAM0G,EAAiB1G,EAAS2B,OAAS,GAAK3B,EAAS2B,OAAS,GADd,WAEzCgF,GACL,IAAMhD,EAAQ3D,EAAS2G,GACjBlE,EAAUkB,EAAMC,kBAEhBgD,EAAmB,CACrBC,OAAQnF,EACRoF,YAAarE,EACbsE,WAAY,WAGhBd,EAAiBe,MAAMJ,GAAkB,SAACK,EAAQC,GAC9C,GAAe,OAAXA,EAAJ,CACA,IAAMC,EAAiBF,EAAOG,OAAO,GAAGC,KAAK,GAC7C,GAAIF,EAEIA,EAAe5C,SAAS/C,MAAQ,GAhM9B,KAmMF,EAAK8F,gBACD3D,EACAwD,EAAe7C,SAASiD,KACxBJ,EAAe5C,SAASgD,MAE5B,EAAK7B,UACD/B,EAAMjB,SAASZ,SAASa,MACxBgB,EAAMjB,SAASZ,SAASc,MACxBe,EAAMnF,KACNmF,EAAMZ,gBA3BjB4D,EAAI,EAAGA,EAAID,EAAgBC,IAAM,EAAjCA,OA9KE,EA6NnBa,mBAAqB,WAAO,IAChBtF,EAAQ,EAAK7E,MAAb6E,IACJuF,UAAUC,aACVD,UAAUC,YAAYC,oBAAmB,SAACC,GACtC,IAAI/E,EAAM,CACNF,IAAKiF,EAASC,OAAOC,SACrBlF,IAAKgF,EAASC,OAAOE,WAEzB7F,EAAIc,MAAMH,GACV,EAAKI,wBAAwBJ,GAC7B,EAAKC,gBAAgBD,EAAIF,IAAKE,EAAID,IAAK,MAAO,QAvOvC,EA4OnBK,wBAA0B,SAACJ,GAAS,IACxBK,EAAY,EAAK7F,MAAjB6F,QACR,EAAK1F,SAAS,CACVkE,kBAAmB,IAAIwB,EAAQ8E,OAAOnF,EAAIF,IAAKE,EAAID,QA/OxC,EAmPnB4B,SAAW,SAACb,GAAW,IACXjC,EAAsB,EAAKrE,MAA3BqE,kBAEFmF,EAAM,UAAMnF,EAAkBiB,MAAMsF,WAA9B,oBACfvG,EAAkBkB,MAAMqF,YACfvI,EAAM,IAAIwI,IAHC,oCAIjBxI,EAAIyI,aAAa1C,IAAI,MAAO,GAC5B/F,EAAIyI,aAAa1C,IAAI,SAAUoB,GAC/BnH,EAAIyI,aAAa1C,IAAI,cAAe9B,EAAMC,mBAE1ClE,EAAIyI,aAAa1C,IAAI,aAAc,WACnC2C,OAAOnE,KAAKvE,IA5PZ,EAAKrC,MAAQ,CACTwF,IAAK3F,EAAM2F,IACXO,YAAY,EACZlB,IAAK,GACLgB,QAAS,GACT8C,cAAe,GACfT,QAAS,IAAIC,IACb9D,kBAAmB,GACnBD,oBAAqB,GACrByE,cAAe,GACf3D,gBAAiB,GACjB0D,iBAAkB,IAbP,E,iEAkBfvI,KAAKF,SAAS,CAAEqF,IAAKnF,KAAKR,MAAM2F,Q,+BAG1B,IAAD,OACL,OAAKnF,KAAKL,MAAMwF,IAOZ,yBAAK3E,UAAU,gBACX,6BAASA,UAAU,kBACf,yBAAKA,UAAU,UACX,kBAAC,IAAD,CACI9B,KAAK,UACLiM,KAAM,kBAACC,EAAA,EAAD,MACNrJ,QAASvB,KAAK8J,mBACd/D,UAAW/F,KAAKL,MAAM+F,aAE1B,kBAAC,EAAD,CACI1B,kBAAmBhE,KAAKL,MAAMqE,kBAC9BD,oBAAqB/D,KAAKL,MAAMoE,oBAChCc,gBAAiB7E,KAAKL,MAAMkF,gBAC5BW,QAASxF,KAAKL,MAAM6F,QACpBhB,IAAKxE,KAAKL,MAAM6E,IAChBY,gBAAiBpF,KAAKoF,gBACtBG,wBACIvF,KAAKuF,wBAETG,WAAY1F,KAAKL,MAAM+F,aAE3B,kBAAC,IAAD,CACIhH,KAAK,UACLiM,KAAM,kBAACE,EAAA,EAAD,MACNtJ,QAASvB,KAAK6D,aACdkC,UAAW/F,KAAKL,MAAM+F,YAJ1B,cASJ,kBAAC,IAAD,CACIoF,iBAAkB,CACdrH,IAjER,0CAkEQsH,UAAW,CAAC,SAAU,eAE1BC,YAAa,GACbC,cAAe,CAAEhG,IAAK,UAAWC,KAAM,YACvCgG,oCAAoC,EACpCC,kBAAmB,gBAAG3G,EAAH,EAAGA,IAAK4G,EAAR,EAAQA,KAAR,OACf,EAAKC,aAAa7G,EAAK4G,KAG1BlE,MAAMoE,KAAKtL,KAAKL,MAAMkI,QAAQtI,UAAUiF,KACrC,SAAC+G,GAAD,OACI,kBAAC,EAAD,CACIzK,KAAMyK,EAAOzK,KACb2C,IAAK8H,EAAO3D,GACZ3C,IAAKsG,EAAOtG,IACZC,IAAKqG,EAAOrG,WAMhC,yBAAK1E,UAAU,WACVR,KAAKL,MAAM2I,cAAc9D,KAAI,SAAC+E,GAAD,OAC1B,kBAAC,EAAD,CACItD,MAAOsD,EACP9F,IAAK8F,EAAO3B,GACZd,SAAU,EAAKA,gBAhE3B,yBAAKtG,UAAU,WACX,kBAACgL,EAAA,EAAD,CAAiBhL,UAAU,kB,mCAuE9BgE,EAAKgB,GAAU,IAAD,OACnBP,EAAM,UACNC,GAAO,UAUX,GATAlF,KAAKF,SAAS,CACV4F,YAAY,EACZlB,MACAgB,UACAzB,oBAAqB,IAAIyB,EAAQoD,OAAO6C,oBACxCjD,cAAe,IAAIhD,EAAQoD,OAAO8C,cAAclH,GAChD+D,iBAAkB,IAAI/C,EAAQmG,kBAC9B9G,gBAAiB,IAAIW,EAAQoG,WAE7B7B,UAAUC,YACVD,UAAUC,YAAYC,oBAAmB,SAACC,GACtCjF,EAAMiF,EAASC,OAAOC,SACtBlF,EAAMgF,EAASC,OAAOE,UACtB,IAAIlF,EAAM,CAAEF,MAAKC,OACjBV,EAAIqH,UAAU1G,GACd,EAAKrF,SAAS,CACVkE,kBAAmB,IAAIwB,EAAQ8E,OAAOrF,EAAKC,YAGhD,CACH,IAAIC,EAAM,CAAEF,MAAKC,OACjBV,EAAIqH,UAAU1G,GACdnF,KAAKF,SAAS,CACVkE,kBAAmB,IAAIwB,EAAQ8E,OAAOrF,EAAKC,Q,sCAwFvCe,EAAOW,EAAUC,GAC7B,IAAIiF,EAAO,sBACJ9L,KAAKL,MAAM2I,eADP,4BAEFrC,GAFE,IAEKW,WAAUC,eAE1BiF,EAAUA,EAAQC,MAAK,SAACC,EAAGC,GACvB,OAAOA,EAAEvF,OAASsF,EAAEtF,UAExB1G,KAAKF,SAAS,CAAEwI,cAAewD,Q,GA3NjBzI,IAAMC,eEVtB4I,E,4MAYFC,yBAA2B,SAACC,GACxB,EAAK5M,MAAML,oBAAoB,SAC/B,EAAKK,MAAM6M,QAAQC,KAAK,U,uDAZxB,OACI,yBAAK9L,UAAU,YACX,yCACA,kBAAC,IAAD,CAAQe,QAASvB,KAAKmM,0BAAtB,yB,GALO9I,IAAMC,eAwBrBnE,EAAwB+D,EAEjBqJ,cACXpJ,aAToB,SAACxD,GACrB,MAAO,CACHO,kBAAmBP,EAAMF,KAAKlB,SAOT,CAAEY,uBAA3BgE,CAAkD+I,IC3BhDM,E,kDACF,WAAYhN,GAAQ,IAAD,8BACf,cAAMA,IACDG,MAAQ,CAAEwF,IAAK,MAFL,E,gEAKE,IAAD,OAChBnF,KAAKR,MAAMiN,iBACP1C,UAAUC,aACVD,UAAUC,YAAYC,oBAAmB,SAACC,GACtC,IAAI/E,EAAM,CACNF,IAAKiF,EAASC,OAAOC,SACrBlF,IAAKgF,EAASC,OAAOE,WAEzB,EAAKvK,SAAS,CAAEqF,a,+BAMxB,OACI,yBAAK3E,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkM,OAAK,EAACtN,KAAK,KACd,kBAAC,EAAD,CAAS+F,IAAKnF,KAAKL,MAAMwF,OAE7B,kBAAC,IAAD,CAAOuH,OAAK,EAACtN,KAAK,SACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOsN,OAAK,EAACtN,KAAK,WACd,kBAACuN,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACtN,KAAK,SACd,kBAAC,EAAD,a,GAjCNiE,IAAMC,eAyChBmJ,EVuCsB,WAC1B,OAAO,SAACxN,GACJ,IAAMV,EAAQM,aAAa+N,QAAQ,SACnC,GAAKrO,EAEE,CACH,IAAMgE,EAAiB,IAAIC,KACvB3D,aAAa+N,QAAQ,mBAGzB,GAAI,IAAIpK,KAASD,EACbtD,EAASL,SACN,CACH,IAAMJ,EAASK,aAAa+N,QAAQ,UAC9BnO,EAAQI,aAAa+N,QAAQ,SACnC3N,EAASX,EAAYC,EAAOC,EAAQC,IACpCQ,EACIF,GAAkBwD,EAAiB,IAAIC,MAAU,YAbzDvD,EAASL,OUzCNuE,cAAQ,KAAM,CAAEsJ,kBAAhBtJ,CAAkCqJ,G,OCrC7BK,QACW,cAA7BnC,OAAOtG,SAAS0I,UAEe,UAA7BpC,OAAOtG,SAAS0I,UAEhBpC,OAAOtG,SAAS0I,SAASC,MACvB,2D,aChBAC,GAAe,CACjBzO,MAAO,KACPC,OAAQ,KACR+B,MAAO,KACPK,SAAS,EACTnC,MAAO,MAGLkD,GAAY,SAAChC,EAAOsN,GACtB,OAAO,2BACAtN,GADP,IAEIY,MAAO,KACP9B,MAAOwO,EAAOxO,MACdmC,SAAS,KAIXtC,GAAc,SAACqB,EAAOsN,EAAQxO,GAChC,OAAO,2BACAkB,GADP,IAEIpB,MAAO0O,EAAOtO,QACdH,OAAQyO,EAAOzO,OACfC,MAAOwO,EAAOxO,MACd8B,MAAO,KACPK,SAAS,KAIXsM,GAAW,SAACvN,EAAOsN,GACrB,OAAO,2BACAtN,GADP,IAEIY,MAAO0M,EAAO1M,MACdK,SAAS,KAIXuM,GAAa,SAACxN,GAChB,OAAO,2BACAA,GADP,IAEIpB,MAAO,KACPC,OAAQ,QAIVW,GAAsB,SAACQ,EAAOsN,GAChC,OAAO,2BACAtN,GADP,IAEIM,iBAAkBgN,EAAO7N,QAqBlBgO,GAjBC,WAAmC,IAAlCzN,EAAiC,uDAAzBqN,GAAcC,EAAW,uCAC9C,OAAQA,EAAOvO,MACX,IXvDkB,aWwDd,OAAOiD,GAAUhC,EAAOsN,GAC5B,IXxDoB,eWyDhB,OAAO3O,GAAYqB,EAAOsN,GAC9B,IXzDiB,YW0Db,OAAOC,GAASvN,EAAOsN,GAC3B,IX1DmB,cW2Df,OAAOE,GAAWxN,GACtB,IX3D8B,yBW4D1B,OAAOR,GAAoBQ,EAAOsN,GACtC,QACI,OAAOtN,I,UCtDb0N,GAAcC,aAAgB,CAChC7N,KAAM8N,KAGJC,GAAmB9C,OAAO+C,sCAAwCC,KAClEC,GAAQC,aACVP,GACAG,GAAiBK,aAAgBC,QAGrCC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGRM,SAASC,eAAe,SFuGtB,kBAAmBnE,WACrBA,UAAUoE,cAAcC,MACrB/L,MAAK,SAAAgM,GACJA,EAAaC,gBAEdxL,OAAM,SAAAvC,GACLyC,QAAQzC,MAAMA,EAAME,c","file":"static/js/main.38d247ab.chunk.js","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\n\n// sync functions\nexport const authStart = (email, password) => {\n    return {\n        type: actionTypes.AUTH_START,\n        email,\n        password,\n    };\n};\n\nexport const authSuccess = (token, userId, email) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId,\n        email: email,\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error,\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationDate\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"email\");\n    return {\n        type: actionTypes.AUTH_LOGOUT,\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(logout()); // execute these sync functions so it will dispatch the action??\n        }, expirationTime * 1000);\n    };\n};\n\n// async\nexport const auth = (email, password, isSignup) => {\n    return (dispatch) => {\n        dispatch(authStart(email, password));\n        const k = `AIzaSyAZDDwgLQa-2L0m1q9vLZDtThaIA1tEwfU`;\n        const BASE_API_URL = `https://identitytoolkit.googleapis.com/v1/accounts:`;\n        const SIGNUP_API_URL = `${BASE_API_URL}signUp?key=${k}`;\n        const SIGNIN_API_URL = `${BASE_API_URL}signInWithPassword?key=${k}`;\n        const url = isSignup ? SIGNUP_API_URL : SIGNIN_API_URL;\n        const payload = {\n            email,\n            password,\n            returnSecureToken: true,\n        };\n        axios\n            .post(url, payload)\n            .then((response) => {\n                const expirationDate = new Date(\n                    new Date().getTime() + response.data.expiresIn * 1000\n                );\n                localStorage.setItem(\"token\", response.data.idToken);\n                localStorage.setItem(\"expirationDate\", expirationDate);\n                localStorage.setItem(\"userId\", response.data.localId);\n                localStorage.setItem(\"email\", response.data.email);\n                dispatch(\n                    authSuccess(\n                        response.data.idToken,\n                        response.data.localId,\n                        response.data.email\n                    )\n                );\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(authFail(err.response.data.error));\n            });\n    };\n};\n\nexport const authCheckState = () => {\n    return (dispatch) => {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(\n                localStorage.getItem(\"expirationDate\")\n            );\n\n            if (new Date() > expirationDate) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem(\"userId\");\n                const email = localStorage.getItem(\"email\");\n                dispatch(authSuccess(token, userId, email));\n                dispatch(\n                    checkAuthTimeout((expirationDate - new Date()) / 1000)\n                );\n            }\n        }\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path,\n    };\n};\n","export const AUTH_START = \"AUTH_START\";\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\nexport const SET_AUTH_REDIRECT_PATH = \"SET_AUTH_REDIRECT_PATH\";\n","import React, { Component } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport * as actions from \"../store/actions\";\nimport { connect } from \"react-redux\";\nimport { Spin } from \"antd\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nclass AuthPage extends Component {\n    constructor() {\n        super();\n        this.state = { isSignup: false };\n    }\n\n    componentWillUnmount() {\n        if (this.props.authRedirectPath !== \"/\") {\n            this.props.setAuthRedirectPath(\"/\");\n        }\n    }\n\n    handleSubmit = (values) => {\n        this.props.auth(values.email, values.password, this.state.isSignup);\n    };\n\n    render() {\n        const { isSignup } = this.state;\n        const { isAuthenticated, email } = this.props;\n        const layout = {\n            labelCol: {\n                span: 8,\n            },\n\n            wrapperCol: {\n                span: 16,\n            },\n        };\n\n        const tailLayout = {\n            wrapperCol: {\n                span: 16,\n            },\n        };\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = <p className=\"error\">{this.props.error.message}</p>;\n        }\n\n        const loginForm = (\n            <div>\n                <h2>{isSignup ? \"Sign up\" : \"Sign in\"}</h2>\n\n                <Spin spinning={this.props.loading}>\n                    <Form {...layout} name=\"basic\" onFinish={this.handleSubmit}>\n                        <Form.Item\n                            label=\"Email\"\n                            name=\"email\"\n                            rules={[\n                                {\n                                    type: \"email\",\n                                    message: \"This is not a valid email!\",\n                                },\n                                {\n                                    required: true,\n                                    message: \"Please input your email!\",\n                                },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[\n                                {\n                                    required: true,\n                                    min: 2,\n                                    message: \"Please input your password!\",\n                                },\n                            ]}\n                            hasFeedback\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Spin>\n                {errorMessage}\n                <Button type=\"link\" onClick={this.switchAuthModeHandler}>\n                    {isSignup ? \"Sign in\" : \"Sign up\"}\n                </Button>\n            </div>\n        );\n\n        const loggedIn = (\n            <>\n                <h2>{`Hi ${email}, you're logged in!`}</h2>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/logout\">Logout</Link>\n            </>\n        );\n\n        if (this.props.isAuthenticated) {\n            return <Redirect to={this.props.authRedirectPath} />;\n        }\n\n        return (\n            <div className=\"authPage\">\n                {isAuthenticated ? loggedIn : loginForm}\n            </div>\n        );\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState((prevState) => {\n            return {\n                isSignup: !prevState.isSignup,\n            };\n        });\n    };\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: !!state.auth.token,\n        email: state.auth.email,\n        authRedirectPath: state.auth.authRedirectPath,\n    };\n};\n\nconst { auth, setAuthRedirectPath } = actions;\n\nexport default connect(mapStateToProps, { auth, setAuthRedirectPath })(\n    AuthPage\n);\n","import React from \"react\";\nimport * as authActions from \"../store/actions/auth\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Logout extends React.PureComponent {\n    componentDidMount() {\n        this.props.logout();\n    }\n\n    render() {\n        return <Redirect to=\"/auth\" />;\n    }\n}\n\nconst { logout } = authActions;\n\nexport default connect(null, { logout })(Logout);\n","import React, { Component } from \"react\";\nimport { EnvironmentTwoTone } from \"@ant-design/icons\";\n\nclass MapMarker extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"MapMarker\" key={this.props.key}>\n\t\t\t\t<EnvironmentTwoTone className=\"icon\" twoToneColor=\"#eb2f96\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MapMarker;\n","import React, { PureComponent } from \"react\";\nimport { AutoComplete } from \"antd\";\n\nclass MapAutoComplete extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmap: this.props.map,\n\t\t\tmapsApi: this.props.mapsApi,\n\t\t\taddSingleMarker: this.props.addSingleMarker,\n\t\t\tupdateCurrentUserLatLng: this.props.updateCurrentUserLatLng,\n\t\t\tsuggestions: [],\n\t\t\toptions: [],\n\t\t\tcurrentUserLatLng: this.props.currentUserLatLng,\n\t\t\tautocompleteService: this.props.autocompleteService,\n\t\t\tgeoCoderService: this.props.geoCoderService,\n\t\t\tmapsLoaded: this.props.mapsLoaded\n\t\t};\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.setState({\n\t\t\tmap: this.props.map,\n\t\t\tmapsApi: this.props.mapsApi,\n\t\t\tcurrentUserLatLng: this.props.currentUserLatLng,\n\t\t\tautocompleteService: this.props.autocompleteService,\n\t\t\tgeoCoderService: this.props.geoCoderService,\n\t\t\tmapsLoaded: this.props.mapsLoaded\n\t\t});\n\t}\n\n\thandleSearch = value => {\n\t\tconst { autocompleteService, currentUserLatLng } = this.state;\n\n\t\tif (value.length > 0) {\n\t\t\tconst searchQuery = {\n\t\t\t\tinput: value,\n\t\t\t\tlocation: currentUserLatLng,\n\t\t\t\tradius: 30000\n\t\t\t};\n\t\t\tautocompleteService.getQueryPredictions(searchQuery, response => {\n\t\t\t\tif (response) {\n\t\t\t\t\tconst options = response.map(resp => {\n\t\t\t\t\t\treturn { ...resp, value: resp.description };\n\t\t\t\t\t});\n\t\t\t\t\tthis.setState({ options, suggestion: response });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tonSelect = value => {\n\t\tconst { map } = this.state;\n\t\tthis.state.geoCoderService.geocode({ address: value }, response => {\n\t\t\tconst { location } = response[0].geometry;\n\t\t\tvar lat = location.lat();\n\t\t\tvar lng = location.lng();\n\t\t\tconst pos = { lat, lng };\n\t\t\tthis.props.addSingleMarker(lat, lng, value, response[0].place_id);\n\t\t\tmap.panTo(pos);\n\t\t\tthis.props.updateCurrentUserLatLng(pos);\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { options } = this.state;\n\t\treturn (\n\t\t\t<div className=\"MapAutoComplete\">\n\t\t\t\t<AutoComplete\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonSearch={this.handleSearch}\n\t\t\t\t\tonSelect={this.onSelect}\n\t\t\t\t\tstyle={{ width: 200 }}\n\t\t\t\t\tplaceholder=\"Enter where you at\"\n\t\t\t\t\tdisabled={!this.props.mapsLoaded}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MapAutoComplete;\n","import React, { PureComponent } from \"react\";\nimport { CarTwoTone, SmileTwoTone, MehTwoTone } from \"@ant-design/icons\";\nimport { green, orange, red } from \"@ant-design/colors\";\n\nclass PlaceCard extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconst place = props.place;\n\t\tthis.place = place;\n\t\tthis.name = place.name;\n\t\tthis.formatted_address = place.formatted_address;\n\t\tthis.price_level = place.price_level;\n\t\tthis.imageUrl = place.photos[0].getUrl();\n\t\tthis.open = place.opening_hours.isOpen();\n\t\tthis.rating = place.rating;\n\t\tthis.user_ratings_total = place.user_ratings_total;\n\t\tthis.distance = place.distance;\n\t\tthis.duration = place.duration;\n\t\tthis.navigate = props.navigate;\n\t}\n\n\trender() {\n\t\tconst separator = <span>&nbsp;·&nbsp;</span>;\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"PlaceCard\"\n\t\t\t\tonClick={() => this.props.navigate(this.place)}\n\t\t\t>\n\t\t\t\t<div className=\"header\">{this.name}</div>\n\t\t\t\t<img src={this.imageUrl} alt={this.name} />\n\t\t\t\t<div className=\"details\">\n\t\t\t\t\t<div className=\"sub-header\">\n\t\t\t\t\t\t<span>{this.rating} Rating</span>\n\t\t\t\t\t\t{separator}\n\t\t\t\t\t\t<span>{this.user_ratings_total} Reviews</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<span className=\"center\">{this.formatted_address}</span>\n\t\t\t\t\t<div className=\"multi-detail\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{new Array(this.price_level).fill(\"$\").join(\"\")}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{separator}\n\t\t\t\t\t\t{this.open ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span>Open </span>\n\t\t\t\t\t\t\t\t<SmileTwoTone />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span>Closed </span>\n\t\t\t\t\t\t\t\t<MehTwoTone />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"multi-detail footer\">\n\t\t\t\t\t\t<CarTwoTone className=\"icon\" />\n\n\t\t\t\t\t\t<span>{this.distance}</span>\n\t\t\t\t\t\t{separator}\n\t\t\t\t\t\t<span>{this.duration}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomputeHeaderBgColor(rating) {\n\t\tif (rating >= 4.0) {\n\t\t\treturn green[4];\n\t\t} else if (rating >= 3.0) {\n\t\t\treturn orange[4];\n\t\t} else {\n\t\t\treturn red[4];\n\t\t}\n\t}\n}\n\nexport default PlaceCard;\n","import React from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport MapMarker from \"../components/MapMarker\";\nimport MapAutoComplete from \"../components/MapAutoComplete\";\nimport PlaceCard from \"../components/PlaceCard\";\nimport { Button } from \"antd\";\nimport {\n    SearchOutlined,\n    AimOutlined,\n    LoadingOutlined,\n} from \"@ant-design/icons\";\nimport { cloneMap } from \"../utils\";\n\nconst MAP_API_KEY = \"AIzaSyBwQDKEdMSdwUt9-ep22TOncRz0XtgCSQw\";\nconst TIME_LIMIT_IN_MINUTES = 30;\n\nclass MapPage extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pos: props.pos,\n            mapsLoaded: false,\n            map: {},\n            mapsApi: {},\n            searchResults: [],\n            markers: new Map(),\n            currentUserLatLng: {},\n            autocompleteService: {},\n            placesService: {},\n            geoCoderService: {},\n            directionService: {},\n        };\n    }\n\n    componentDidUpdate() {\n        this.setState({ pos: this.props.pos });\n    }\n\n    render() {\n        if (!this.state.pos)\n            return (\n                <div className=\"Loading\">\n                    <LoadingOutlined className=\"icon-large\" />\n                </div>\n            );\n        return (\n            <div className=\"mapContainer\">\n                <section className=\"GoogleMapReact\">\n                    <div className=\"search\">\n                        <Button\n                            type=\"primary\"\n                            icon={<AimOutlined />}\n                            onClick={this.getCurrentLocation}\n                            disabled={!this.state.mapsLoaded}\n                        ></Button>\n                        <MapAutoComplete\n                            currentUserLatLng={this.state.currentUserLatLng}\n                            autocompleteService={this.state.autocompleteService}\n                            geoCoderService={this.state.geoCoderService}\n                            mapsApi={this.state.mapsApi}\n                            map={this.state.map}\n                            addSingleMarker={this.addSingleMarker}\n                            updateCurrentUserLatLng={\n                                this.updateCurrentUserLatLng\n                            }\n                            mapsLoaded={this.state.mapsLoaded}\n                        />\n                        <Button\n                            type=\"primary\"\n                            icon={<SearchOutlined />}\n                            onClick={this.handleSearch}\n                            disabled={!this.state.mapsLoaded}\n                        >\n                            Find Boba\n                        </Button>\n                    </div>\n                    <GoogleMapReact\n                        bootstrapURLKeys={{\n                            key: MAP_API_KEY,\n                            libraries: [\"places\", \"directions\"],\n                        }}\n                        defaultZoom={12}\n                        defaultCenter={{ lat: 37.774929, lng: -122.419418 }}\n                        yesIWantToUseGoogleMapApiInternals={true}\n                        onGoogleApiLoaded={({ map, maps }) =>\n                            this.apiHasLoaded(map, maps)\n                        }\n                    >\n                        {Array.from(this.state.markers.values()).map(\n                            (marker) => (\n                                <MapMarker\n                                    name={marker.name}\n                                    key={marker.id}\n                                    lat={marker.lat}\n                                    lng={marker.lng}\n                                />\n                            )\n                        )}\n                    </GoogleMapReact>\n                </section>\n                <div className=\"results\">\n                    {this.state.searchResults.map((result) => (\n                        <PlaceCard\n                            place={result}\n                            key={result.id}\n                            navigate={this.navigate}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    apiHasLoaded(map, mapsApi) {\n        let lat = 37.774929,\n            lng = -122.41948;\n        this.setState({\n            mapsLoaded: true,\n            map,\n            mapsApi,\n            autocompleteService: new mapsApi.places.AutocompleteService(),\n            placesService: new mapsApi.places.PlacesService(map),\n            directionService: new mapsApi.DirectionsService(),\n            geoCoderService: new mapsApi.Geocoder(),\n        });\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                lat = position.coords.latitude;\n                lng = position.coords.longitude;\n                var pos = { lat, lng };\n                map.setCenter(pos);\n                this.setState({\n                    currentUserLatLng: new mapsApi.LatLng(lat, lng),\n                });\n            });\n        } else {\n            var pos = { lat, lng };\n            map.setCenter(pos);\n            this.setState({\n                currentUserLatLng: new mapsApi.LatLng(lat, lng),\n            });\n        }\n    }\n\n    addSingleMarker = (lat, lng, name, id) => {\n        const markers = new Map();\n        markers.set(id, { lat, lng, name, id });\n        console.log(`Added new \"${name}\" Marker`);\n        this.setState({ markers });\n    };\n\n    addMarker = (lat, lng, name, id) => {\n        const prevMarkers = this.state.markers;\n        const markers = cloneMap(prevMarkers);\n\n        if (markers.has(id)) {\n            markers.get(id).lat = lat;\n            markers.get(id).lng = lng;\n            console.log(`Updated \"${name}\" Marker`);\n        } else {\n            markers.set(id, { lat, lng, name, id });\n            console.log(`Added new \"${name}\" Marker`);\n        }\n\n        this.setState({ markers });\n    };\n\n    handleSearch = () => {\n        this.setState({ searchResults: [], markers: new Map() });\n        const {\n            mapsApi,\n            directionService,\n            placesService,\n            currentUserLatLng,\n        } = this.state;\n\n        const placesRequest = {\n            location: currentUserLatLng,\n            type: [\n                \"restaurant\",\n                \"cafe\",\n                \"food\",\n                \"points_of_interest\",\n                \"establishment\",\n            ],\n            query: \"boba, bubble, milk, tea, 波霸, 奶茶\",\n            rankBy: mapsApi.places.RankBy.DISTANCE,\n        };\n\n        placesService.textSearch(placesRequest, (response) => {\n            const responseLength = response.length < 10 ? response.length : 10;\n            for (let i = 0; i < responseLength; i++) {\n                const place = response[i];\n                const address = place.formatted_address;\n\n                const directionRequest = {\n                    origin: currentUserLatLng,\n                    destination: address,\n                    travelMode: \"DRIVING\",\n                };\n\n                directionService.route(directionRequest, (result, status) => {\n                    if (status !== \"OK\") return;\n                    const travelingRoute = result.routes[0].legs[0];\n                    if (travelingRoute) {\n                        const travelingTimeInMinutes =\n                            travelingRoute.duration.value / 60;\n\n                        if (travelingTimeInMinutes < TIME_LIMIT_IN_MINUTES) {\n                            this.addSearchResult(\n                                place,\n                                travelingRoute.distance.text,\n                                travelingRoute.duration.text\n                            );\n                            this.addMarker(\n                                place.geometry.location.lat(),\n                                place.geometry.location.lng(),\n                                place.name,\n                                place.place_id\n                            );\n                        }\n                    }\n                });\n            }\n        });\n    };\n\n    addSearchResult(place, distance, duration) {\n        let results = [\n            ...this.state.searchResults,\n            { ...place, distance, duration },\n        ];\n        results = results.sort((a, b) => {\n            return b.rating - a.rating;\n        });\n        this.setState({ searchResults: results });\n    }\n\n    getCurrentLocation = () => {\n        const { map } = this.state;\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                var pos = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                };\n                map.panTo(pos);\n                this.updateCurrentUserLatLng(pos);\n                this.addSingleMarker(pos.lat, pos.lng, \"You\", \"\");\n            });\n        }\n    };\n\n    updateCurrentUserLatLng = (pos) => {\n        const { mapsApi } = this.state;\n        this.setState({\n            currentUserLatLng: new mapsApi.LatLng(pos.lat, pos.lng),\n        });\n    };\n\n    navigate = (place) => {\n        const { currentUserLatLng } = this.state;\n        const BASE_URL = \"https://www.google.com/maps/dir/\";\n        const origin = `${currentUserLatLng.lat().toString()},\n\t\t\t${currentUserLatLng.lng().toString()}`;\n        const url = new URL(BASE_URL);\n        url.searchParams.set(\"api\", 1);\n        url.searchParams.set(\"origin\", origin);\n        url.searchParams.set(\"destination\", place.formatted_address);\n        // url.searchParams.set(\"destination_place_id\", place.place_id);\n        url.searchParams.set(\"travelmode\", \"driving\");\n        window.open(url);\n    };\n}\n\nexport default MapPage;\n","export function cloneMap(map) {\n\tconst newMap = new Map();\n\tmap.forEach((value, key) => {\n\t\tnewMap.set(key, { ...value });\n\t});\n\treturn newMap;\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions\";\nimport { withRouter } from \"react-router-dom\";\n\nclass TestPage extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"testPage\">\n                <h2>Test Page</h2>\n                <Button onClick={this.handleLoginButtonClicked}>\n                    Go to login page\n                </Button>\n            </div>\n        );\n    }\n\n    handleLoginButtonClicked = (e) => {\n        this.props.setAuthRedirectPath(\"/test\");\n        this.props.history.push(\"/auth\");\n    };\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: !!state.auth.token,\n    };\n};\n\nconst { setAuthRedirectPath } = actions;\n\nexport default withRouter(\n    connect(mapStateToProps, { setAuthRedirectPath })(TestPage)\n);\n","import React from \"react\";\nimport { MapPage, AuthPage, LogoutPage, TestPage } from \"./pages\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions\";\n\nclass App extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = { pos: null };\n    }\n\n    componentDidMount() {\n        this.props.authCheckState();\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                var pos = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                };\n                this.setState({ pos });\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path=\"/\">\n                        <MapPage pos={this.state.pos} />\n                    </Route>\n                    <Route exact path=\"/auth\">\n                        <AuthPage />\n                    </Route>\n                    <Route exact path=\"/logout\">\n                        <LogoutPage />\n                    </Route>\n                    <Route exact path=\"/test\">\n                        <TestPage />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst { authCheckState } = actions;\n\nexport default connect(null, { authCheckState })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    email: null,\n};\n\nconst authStart = (state, action) => {\n    return {\n        ...state,\n        error: null,\n        email: action.email,\n        loading: true,\n    };\n};\n\nconst authSuccess = (state, action, email) => {\n    return {\n        ...state,\n        token: action.idToken,\n        userId: action.userId,\n        email: action.email,\n        error: null,\n        loading: false,\n    };\n};\n\nconst authFail = (state, action) => {\n    return {\n        ...state,\n        error: action.error,\n        loading: false,\n    };\n};\n\nconst authLogout = (state) => {\n    return {\n        ...state,\n        token: null,\n        userId: null,\n    };\n};\n\nconst setAuthRedirectPath = (state, action) => {\n    return {\n        ...state,\n        authRedirectPath: action.path,\n    };\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START:\n            return authStart(state, action);\n        case actionTypes.AUTH_SUCCESS:\n            return authSuccess(state, action);\n        case actionTypes.AUTH_FAIL:\n            return authFail(state, action);\n        case actionTypes.AUTH_LOGOUT:\n            return authLogout(state, action);\n        case actionTypes.SET_AUTH_REDIRECT_PATH:\n            return setAuthRedirectPath(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nimport { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport authReducer from \"./store/reducers/auth.js\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}